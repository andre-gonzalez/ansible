---
- name: Extract anki files
  tags:
    - full-install
    - light-install
    - anki
  ansible.builtin.unarchive:
    src: "{{ lookup('env', 'HOME') }}/.config/anki/anki-installer.tar.zst"
    dest: "{{ lookup('env', 'HOME') }}/.config/anki/install-files"
  listen: proceed anki installation

- name: Install anki
  tags:
    - full-install
    - light-install
    - anki
  ansible.builtin.script:
    chdir: "{{ lookup('env', 'HOME') }}/.config/anki/install-files/{{ json_reponse.json.assets.2.name | regex_replace( '\\.\\w*\\.\\w*$', '')  }}"
    cmd: "{{ lookup('env', 'HOME') }}/.config/anki/install-files/{{ json_reponse.json.assets.2.name | regex_replace( '\\.\\w*\\.\\w*$', '')  }}/install.sh"
  become: true
  listen: proceed anki installation

- name: restart systemd-networkd
  tags:
    - full-install
    - light-install
    - network
  ansible.builtin.service:
    name: systemd-networkd
    state: restarted
    enabled: true
  become: true
  listen: "restart network"

- name: start iwd
  tags:
    - full-install
    - light-install
    - network
  ansible.builtin.service:
    name: iwd
    state: restarted
    enabled: true
  become: true
  listen: "restart network"

- name: restart libvirt
  tags:
    - full-install
    - light-install
    - libvirt
  ansible.builtin.service:
    name: libvirtd
    state: restarted
    enabled: true
  become: true
  listen: "finish libvirt configuration"

# - name: virsh start
#   tags:
#     - full-install
#     - light-install
#     - libvirt
#   ansible.builtin.command: virsh net-autostart default && virsh net-start default
#   become: true
#   listen: "finish libvirt configuration"

- name: Disable root login via ssh
  tags:
    - full-install
    - light-install
    - security
  ansible.builtin.lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: '^PermitRootLogin'
    line: "PermitRootLogin no"
    state: present
    backup: true
  become: true
  listen: "secure ssh"

- name: Disable password login via ssh
  tags:
    - full-install
    - light-install
    - security
    - ssh
  ansible.builtin.lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: '^PasswordAuthentication'
    line: "PasswordAuthentication no"
    state: present
    backup: true
  become: true
  listen: "secure ssh"

- name: install denyhosts
  tags:
    - full-install
    - light-install
    - security
    - ssh
  ansible.builtin.package:
    name: denyhosts
  become: true
  listen: "secure ssh"

- name: restart ssh
  tags:
    - full-install
    - light-install
    - security
    - ssh
  ansible.builtin.service:
    name: sshd
    state: restarted
  become: true
  listen: "secure ssh"

- name: restart preload
  tags:
    - full-install
    - light-install
    - preload
  ansible.builtin.service:
    name: preload
    state: restarted
    enabled: true
  become: true

- name: copy file update-grub
  tags:
    - full-install
    - light-install
    - grub
  ansible.builtin.copy:
    src: update-grub
    dest: /usr/sbin
    owner: root
    group: root
    mode: 0755
  become: true
  listen: "update grub"

- name: run update grub
  tags:
    - full-install
    - light-install
    - grub
  ansible.builtin.command: update-grub
  become: true
  listen: "update grub"

- name: restart tlp
  tags:
    - full-install
    - light-install
    - save-battery
    - tlp
  ansible.builtin.service:
    name: tlp
    state: restarted
    enabled: true
  become: true

- name: Calibrate powertop
  tags:
    - full-install
    - light-install
    - save-battery
    - powertop
  ansible.builtin.command: powertop --calibrate
  become: true

- name: Install nvim plugins
  tags:
    - full-install
    - light-install
    - neovim
  ansible.builtin.command: nvim --headless +PlugInstall +qa

- name: Install treesitter support for python
  tags:
    - full-install
    - light-install
    - neovim
  ansible.builtin.command: nvim --headless +TSInstall python +qa
  listen: Install treesitter

- name: Install treesitter support for bash
  tags:
    - full-install
    - light-install
    - neovim
  ansible.builtin.command: nvim --headless +TSInstall bash +qa
  listen: Install treesitter

- name: Install treesitter support for json
  tags:
    - full-install
    - light-install
    - neovim
  ansible.builtin.command: nvim --headless +TSInstall json +qa
  listen: Install treesitter

- name: Install treesitter support for markdown
  tags:
    - full-install
    - light-install
    - neovim
  ansible.builtin.command: nvim --headless +TSInstall markdown +qa
  listen: Install treesitter

- name: Install treesitter support for yaml
  tags:
    - full-install
    - light-install
    - neovim
  ansible.builtin.command: nvim --headless +TSInstall yaml +qa
  listen: Install treesitter

- name: Install treesitter support for fish
  tags:
    - full-install
    - light-install
    - neovim
  ansible.builtin.command: nvim --headless +TSInstall fish +qa
  listen: Install treesitter

- name: Install treesitter support for regex
  tags:
    - full-install
    - light-install
    - neovim
  ansible.builtin.command: nvim --headless +TSInstall regex +qa
  listen: Install treesitter

- name: Install treesitter support for latex
  tags:
    - full-install
    - light-install
    - neovim
  ansible.builtin.command: nvim --headless +TSInstall latex +qa
  listen: Install treesitter

- name: Install treesitter support for html
  tags:
    - full-install
    - light-install
    - neovim
  ansible.builtin.command: nvim --headless +TSInstall html +qa
  listen: Install treesitter

- name: Install treesitter support for graphql
  tags:
    - full-install
    - light-install
    - neovim
  ansible.builtin.command: nvim --headless +TSInstall graphql +qa
  listen: Install treesitter

- name: Install treesitter support for docker
  tags:
    - full-install
    - light-install
    - neovim
  ansible.builtin.command: nvim --headless +TSInstall dockerfile +qa
  listen: Install treesitter

- name: Install treesitter support for css
  tags:
    - full-install
    - light-install
    - neovim
  ansible.builtin.command: nvim --headless +TSInstall css +qa
  listen: Install treesitter

- name: Mark all informant news as read
  tags:
    - aur
    - light-install
    - packages
    - full-install
  ansible.builtin.command: informant read --all
  become: true
  ignore_errors: true

- name: set up dotfiles
  tags:
    - full-install
    - light-install
    - dotfiles
  ansible.builtin.command: "/usr/bin/git --git-dir={{ ansible_env.HOME }}/.config/dotfiles/ --work-tree={{ ansible_env.HOME }} checkout -f"

- name: Mark oh-my-fish installed with /etc/omf.installed
  tags:
    - full-install
    - light-install
    - fish
  ansible.builtin.file:
    path: /etc/omf.installed
    state: touch
  become: true

- name: restart pulseaudio
  tags:
    - full-install
    - light-install
    - pulseaudio
  ansible.builtin.service:
    name: pulseaudio
    state: restarted
    enabled: true
  become: true
  listen: "restart pulseaudio"

- name: Create samba password and the user {{ ansible_env.USER }}
  tags:
    - full-install
    - samba
  ansible.builtin.shell: "(echo '{{ samba_pass }}'; echo '{{ samba_pass }}') | smbpasswd -s -a {{ ansible_env.USER }}"
  register: smbpasswd
  changed_when: "'Added user' in smbpasswd.stdout"
  become: true
  listen: "finish samba configuration"

- name: start samba (smb) service
  tags:
    - full-install
    - samba
  ansible.builtin.service:
    name: smb
    state: restarted
    enabled: true
  become: true
  listen: "finish samba configuration"

- name: start samba (nmb) service
  tags:
    - full-install
    - samba
  ansible.builtin.service:
    name: nmb
    state: restarted
    enabled: true
  become: true
  listen: "finish samba configuration"
